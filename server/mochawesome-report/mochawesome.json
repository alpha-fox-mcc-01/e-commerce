{
  "stats": {
    "suites": 5,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-20T11:14:37.234Z",
    "end": "2020-01-20T11:14:40.907Z",
    "duration": 3673,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "00b8fd5f-39c4-454e-9d8a-3f9be5e2a3db",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a44d46a5-a608-4e65-8faf-f7a912a2bd82",
          "title": "Product Routing",
          "fullFile": "/home/nafies/Documents/nafies/e-commerce/server/test/product.test.js",
          "file": "/test/product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
              "title": "post /product",
              "fullFile": "/home/nafies/Documents/nafies/e-commerce/server/test/product.test.js",
              "file": "/test/product.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Product Routing post /product \"before each\" hook",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Product.deleteMany()\n  .then(_ => {\n    done()\n  })\n  .catch(err => {\n    done(err)\n  })",
                  "err": {},
                  "uuid": "3a7b7fb5-4c7b-4060-849b-f8a955dae0fb",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Product Routing post /product \"after all\" hook",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Product.deleteMany()\n  .then(_ => {\n    done()\n  })\n  .catch(err => {\n    done(err)\n  })",
                  "err": {},
                  "uuid": "21caffb2-e725-402f-8f0f-a7a085ca34ff",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should have status 201 and return new Product data (_id, name, price, stock, description, featured_image)",
                  "fullTitle": "Product Routing post /product should have status 201 and return new Product data (_id, name, price, stock, description, featured_image)",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/product')\n  .send({\n    name: 'sepatu',\n    price: 200000,\n    stock: 10,\n    description: 'Sepatu lari',\n    featured_image: 'https://pbs.twimg.com/profile_images/725275730267926528/dGPyaQZ6_400x400.jpg'\n  })\n  .end((err, res) => {\n    console.log(res.body)\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body).to.have.property('name').to.equal('sepatu')\n    expect(res.body).to.have.property('price').to.be.a('Number'), //.to.equal(200000),\n    expect(res.body).to.have.property('stock').to.equal(10)\n    expect(res.body).to.have.property('description').to.equal('Sepatu lari')\n    expect(res.body).to.have.property('_id')\n    expect(res.body).to.have.property('featured_image')\n    done()\n  })",
                  "err": {},
                  "uuid": "8d3f2e6d-c096-4317-b321-57c32bec837e",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if stock is less than 0",
                  "fullTitle": "Product Routing post /product should have status 400 and return error validation if stock is less than 0",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/product')\n  .send({\n    name: 'sepatu',\n    price: 20000,\n    stock: -10,\n    description: 'Sepatu lari',\n    featured_image: 'https://pbs.twimg.com/profile_images/725275730267926528/dGPyaQZ6_400x400.jpg'\n  })\n  .end((err, res) => {\n    console.log(res.body);\n    \n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.equal('Minimal stock is 0')\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "8fb8cce4-ca2b-4053-91d3-732e7ecf452e",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if price or stock entered is not a number",
                  "fullTitle": "Product Routing post /product should have status 400 and return error validation if price or stock entered is not a number",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/product')\n  .send({\n    name: 'sepatu',\n    price: '20000m',\n    stock: '10m',\n    description: 'Sepatu lari',\n    featured_image: 'https://pbs.twimg.com/profile_images/725275730267926528/dGPyaQZ6_400x400.jpg'\n  })\n  .end((err, res) => {\n    console.log(res.body);\n    \n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.have.string('Cast to Number failed')\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "069b802d-86c2-4a5c-b906-81a8f7361dc2",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if name is empty",
                  "fullTitle": "Product Routing post /product should have status 400 and return error validation if name is empty",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/product')\n  .send({\n    name: '',\n    price: 20000,\n    stock: 10,\n    description: 'Sepatu lari',\n    featured_image: 'https://pbs.twimg.com/profile_images/725275730267926528/dGPyaQZ6_400x400.jpg'\n  })\n  .end((err, res) => {\n    console.log(res.body);\n    \n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.have.string('Name is required')\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "9faf8d5c-11d5-4fc0-96ce-d23a22d5dd16",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if price is empty",
                  "fullTitle": "Product Routing post /product should have status 400 and return error validation if price is empty",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/product')\n  .send({\n    name: 'sepatu',\n    price: null,\n    stock: 10,\n    description: 'Sepatu lari',\n    featured_image: 'https://pbs.twimg.com/profile_images/725275730267926528/dGPyaQZ6_400x400.jpg'\n  })\n  .end((err, res) => {\n    console.log(res.body);\n    \n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.have.string('Price is required')\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "288d9cee-6f6b-4bfd-b271-8fd181e8b4d0",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if stock is empty",
                  "fullTitle": "Product Routing post /product should have status 400 and return error validation if stock is empty",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/product')\n  .send({\n    name: 'sepatu',\n    price: 200000,\n    stock: null,\n    description: 'Sepatu lari',\n    featured_image: 'https://pbs.twimg.com/profile_images/725275730267926528/dGPyaQZ6_400x400.jpg'\n  })\n  .end((err, res) => {\n    console.log(res.body);\n    \n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.have.string('Stock is required')\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "c8e8e616-2cad-4f41-bb27-6344609ee093",
                  "parentUUID": "0c9ce44a-9cdc-48bc-b706-9092ddd20c05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d3f2e6d-c096-4317-b321-57c32bec837e",
                "8fb8cce4-ca2b-4053-91d3-732e7ecf452e",
                "069b802d-86c2-4a5c-b906-81a8f7361dc2",
                "9faf8d5c-11d5-4fc0-96ce-d23a22d5dd16",
                "288d9cee-6f6b-4bfd-b271-8fd181e8b4d0",
                "c8e8e616-2cad-4f41-bb27-6344609ee093"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c3cc160a-f6cf-4882-94cd-8e8d935292c0",
          "title": "User Routing",
          "fullFile": "/home/nafies/Documents/nafies/e-commerce/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2cac7d7a-5a42-4f53-a901-c917f9bdb6e7",
              "title": "/register",
              "fullFile": "/home/nafies/Documents/nafies/e-commerce/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "User Routing /register \"before each\" hook",
                  "timedOut": false,
                  "duration": 26,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.deleteMany()\n  .then(_ => {\n    done()\n  })\n  .catch(err => {\n    done(err)\n  })",
                  "err": {},
                  "uuid": "8d2b60a6-c6cb-4cc4-b4c8-ba91a28b37d5",
                  "parentUUID": "2cac7d7a-5a42-4f53-a901-c917f9bdb6e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "User Routing /register \"after all\" hook",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.deleteMany()\n  .then(_ => {\n    done()\n  })\n  .catch(err => {\n    done(err)\n  })",
                  "err": {},
                  "uuid": "55a667ba-f255-4d88-ac7e-332e48b99b5e",
                  "parentUUID": "2cac7d7a-5a42-4f53-a901-c917f9bdb6e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should have status 201 and return new User data (_id, name, email, cartLists)",
                  "fullTitle": "User Routing /register should have status 201 and return new User data (_id, name, email, cartLists)",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/user/register')\n  .send({\n    name: 'master',\n    email: 'd@mail.com',\n    password: '123456789'\n  })\n  .end((err, res) => {\n    console.log(res.body)\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body).to.have.property('email').to.equal('d@mail.com')\n    expect(res.body).to.have.property('name').to.equal('master')\n    expect(res.body).to.have.property('_id')\n    expect(res.body).to.have.property('cartLists')\n    expect(res.body).to.have.property('token')\n    done()\n  })",
                  "err": {},
                  "uuid": "a2a13e64-4993-4487-ab26-fe972858b4f2",
                  "parentUUID": "2cac7d7a-5a42-4f53-a901-c917f9bdb6e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if email is invalid",
                  "fullTitle": "User Routing /register should have status 400 and return error validation if email is invalid",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/user/register')\n  .send({\n    email: 'dmail.com',\n    password: '12345678'\n  })\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.equal('Invalid Email Format')\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "044bad1f-b05a-4400-b8e1-dbfb045cc48f",
                  "parentUUID": "2cac7d7a-5a42-4f53-a901-c917f9bdb6e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error validation if password length < 7",
                  "fullTitle": "User Routing /register should have status 400 and return error validation if password length < 7",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/user/register')\n  .send({\n    email: 'z@mail.com',\n    password: '1'\n  })\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body).to.have.own.property('msg').to.equal('Validation Error')\n    expect(res.body).to.have.own.property('errors').to.be.an('array')\n    expect(res.body.errors[0]).to.equal('Password minimum length is 7')\n    done()\n  })",
                  "err": {},
                  "uuid": "bb75ffc2-fbf3-4167-ab27-539b69a09de3",
                  "parentUUID": "2cac7d7a-5a42-4f53-a901-c917f9bdb6e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2a13e64-4993-4487-ab26-fe972858b4f2",
                "044bad1f-b05a-4400-b8e1-dbfb045cc48f",
                "bb75ffc2-fbf3-4167-ab27-539b69a09de3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 237,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0b8b1fe8-0adc-4163-a2b5-07804825979e",
              "title": "/login",
              "fullFile": "/home/nafies/Documents/nafies/e-commerce/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "User Routing /login \"before each\" hook",
                  "timedOut": false,
                  "duration": 104,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.create({\n  name: 'master',\n  email: 'naf@naf.id',\n  password: 'mantapjiwa123'\n})\n  .then(_ => {\n    done()\n  })\n  .catch(err => {\n    done(err)\n  })",
                  "err": {},
                  "uuid": "7f3ada81-d865-4eba-8a16-d5a0833a99b8",
                  "parentUUID": "0b8b1fe8-0adc-4163-a2b5-07804825979e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "User Routing /login \"after all\" hook",
                  "timedOut": false,
                  "duration": 29,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.deleteMany()\n  .then(_ => {\n    done()\n  })\n  .catch(err => {\n    done(err)\n  })",
                  "err": {},
                  "uuid": "4e2f13f9-d497-4113-b563-3bf62bcecaea",
                  "parentUUID": "0b8b1fe8-0adc-4163-a2b5-07804825979e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should have status 200 and return User data (_id, name, email, cartLists)",
                  "fullTitle": "User Routing /login should have status 200 and return User data (_id, name, email, cartLists)",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/user/login')\n  .send({\n    email: 'naf@naf.id',\n    password: 'mantapjiwa123'\n  })\n  .end((err, res) => {\n    console.log(res.body)\n    expect(err).to.be.null;\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('email').to.equal('naf@naf.id')\n    expect(res.body).to.have.property('name').to.equal('master')\n    expect(res.body).to.have.property('_id')\n    expect(res.body).to.have.property('cartLists')\n    expect(res.body).to.have.property('token')\n    done()\n  })",
                  "err": {},
                  "uuid": "f619acd6-97a4-4dae-ba76-5f9774457b4f",
                  "parentUUID": "0b8b1fe8-0adc-4163-a2b5-07804825979e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error if email is wrong",
                  "fullTitle": "User Routing /login should have status 400 and return error if email is wrong",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/user/login')\n  .send({\n    email: 'naf@dmail.com',\n    password: 'mantapjiwa123'\n  })\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body.error).to.equal('Username / Password is wrong')\n    expect(res.body).to.have.own.property('msg').to.equal('Input Wrong')\n    done()\n  })",
                  "err": {},
                  "uuid": "d0cec033-2527-4f57-9253-b3460ff77d5a",
                  "parentUUID": "0b8b1fe8-0adc-4163-a2b5-07804825979e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have status 400 and return error if password is wrong",
                  "fullTitle": "User Routing /login should have status 400 and return error if password is wrong",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .post('/user/login')\n  .send({\n    email: 'naf@naf.id',\n    password: 'mantapjiwa12'\n  })\n  .end((err, res) => {\n    expect(err).to.be.null\n    expect(res).to.have.status(400)\n    expect(res.body.error).to.equal('Username / Password is wrong')\n    expect(res.body).to.have.own.property('msg').to.equal('Input Wrong')\n    done()\n  })",
                  "err": {},
                  "uuid": "9492f2bf-7aa9-45fe-af6a-0d0fb35f5ad0",
                  "parentUUID": "0b8b1fe8-0adc-4163-a2b5-07804825979e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f619acd6-97a4-4dae-ba76-5f9774457b4f",
                "d0cec033-2527-4f57-9253-b3460ff77d5a",
                "9492f2bf-7aa9-45fe-af6a-0d0fb35f5ad0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}